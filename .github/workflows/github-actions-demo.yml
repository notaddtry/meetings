name: cicd with actions
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
env:
  PORT: ${{ vars.PORT }}
  DB_USER: ${{ vars.DB_USER }}
  DEV_HOST: ${{ vars.DEV_HOST }}
  PROD_HOST_DB: ${{ vars.PROD_HOST_DB }}
  DB_NAME: ${{ vars.DB_NAME }}
  DB_PASSWORD: ${{ vars.DB_PASSWORD }}
  DB_PORT: ${{ vars.DB_PORT }}
  PROD_HOST_REDIS: ${{ vars.PROD_HOST_REDIS }}
  REDIS_PORT: ${{ vars.REDIS_PORT }}
  env_var: ${{ vars.PORT }}
  DAY_OF_WEEK: Monday

jobs:
  display-variables:
    runs-on: ubuntu-latest
    name: display-variables
    # You can use configuration variables with the `vars` context for dynamic jobs
    steps:
      - name: Use variables
        run: |
          echo "repository variable : $DAY_OF_WEEK"
          echo "organization variable : $env_var"
          echo "overridden variable : $PORT"
          echo "variable from shell environment : $env_var"

  init:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v3
      - name: Staring Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      # - name: Build the stack
      #   run: docker compose --env-file .env up

      - name: install modules
        run: npm install
      - name: start project
        env:
          PORT: ${{ env.PORT }}
          DB_USER: ${{ env.DB_USER }}
          DEV_HOST: ${{ env.DEV_HOST }}
          PROD_HOST_DB: ${{ env.PROD_HOST_DB }}
          DB_NAME: ${{ env.DB_NAME }}
          DB_PASSWORD: ${{ env.DB_PASSWORD }}
          DB_PORT: ${{ env.DB_PORT }}
          PROD_HOST_REDIS: ${{ env.PROD_HOST_REDIS }}
          REDIS_PORT: ${{ env.REDIS_PORT }}
          MAIL_USER: ${{ secrets.MAIL_USER }}
          MAIL_TOKEN: ${{ secrets.MAIL_TOKEN }}
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
        run: npm run start
      - name: unit test
        run: npm run test:unit
      - name: e2e test
        run: npm run test:integration
