name: cicd with actions
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
env:
  PORT: ${{ vars.PORT }}
  POSTGRES_USER: ${{ vars.POSTGRES_USER }}
  DEV_HOST: ${{ vars.DEV_HOST }}
  PROD_HOST_DB: ${{ vars.PROD_HOST_DB }}
  POSTGRES_DB: ${{ vars.POSTGRES_DB }}
  POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
  POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
  PROD_HOST_REDIS: ${{ vars.PROD_HOST_REDIS }}
  REDIS_PORT: ${{ vars.REDIS_PORT }}
  MAIL_USER: ${{ secrets.MAIL_USER }}
  MAIL_TOKEN: ${{ secrets.MAIL_TOKEN }}
  TG_TOKEN: ${{ secrets.TG_TOKEN }}

jobs:
  init:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v3
      - name: Staring Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: install modules
        run: npm install
      - name: unit test
        run: npm run test:unit
        env:
          PROD_HOST_REDIS: ${{ vars.PROD_HOST_REDIS }}
          REDIS_PORT: ${{ vars.REDIS_PORT }}
          DEV_HOST: ${{ vars.DEV_HOST }}
      - name: e2e test
        run: npm run test:integration

        env:
          NODE_ENV: prod
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          DEV_HOST: ${{ vars.DEV_HOST }}
          PROD_HOST_DB: ${{ vars.PROD_HOST_DB }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
  run_docker:
    runs-on: ubuntu-latest
    steps:
      - name: 'Create env file'
        run: |
          touch .env
          echo PORT=${{ vars.PORT }} >> .env
          echo POSTGRES_USER=${{ vars.POSTGRES_USER }} >> .env
          echo DEV_HOST=${{ vars.DEV_HOST }} >> .env
          echo PROD_HOST_DB=${{ vars.PROD_HOST_DB }} >> .env
          echo POSTGRES_DB=${{ vars.POSTGRES_DB }} >> .env
          echo POSTGRES_PASSWORD=${{ vars.POSTGRES_PASSWORD }} >> .env
          echo POSTGRES_PORT=${{ vars.POSTGRES_PORT }} >> .env
          echo PROD_HOST_REDIS=${{ vars.PROD_HOST_REDIS }} >> .env
          echo REDIS_PORT=${{ vars.REDIS_PORT }} >> .env
          echo MAIL_USER=${{ secrets.MAIL_USER }} >> .env
          echo MAIL_TOKEN=${{ secrets.MAIL_TOKEN }} >> .env
          echo TG_TOKEN=${{ secrets.TG_TOKEN }} >> .env
          cat .env

      - name: Build the stack
        run: docker compose up
